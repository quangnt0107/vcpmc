import React, { useEffect, useLayoutEffect, useRef, useState } from "react";
import { useHistory, useLocation, useParams } from "react-router";
import querystring from "query-string";
import useTable from "@view/shared/components/TableComponent/hook";
import TableComponent from "@view/shared/components/TableComponent";
import MainTitleComponent, {
  Breadcrumbs,
} from "@view/shared/components/MainTitleComponent";
import { FormatNumber } from "@view/shared/helper/functions";
import presenterBussiness from "@modules/reportRevenueExploitingContract/presenter";
import { useAsync } from "@view/shared/hook/useAsync";
import { Button, Col, DatePicker, Row, Select } from "antd";
import moment, { Moment } from "moment";
import { routerRptRevByExploiting } from "@view/routers";
import FilterByPeriod from "@view/shared/components/FilterByPeriod";
import queryString from "query-string";
import {
  common,
  revenueByExploitingContractTranslateKey,
} from "@view/shared/translateKey";
import { useTranslate } from "@view/shared/hook/useTranslate";

const formatFromQuery = "YYYY-MM-DD";
interface Props {}

const ViewDataById = (props: Props) => {
  const { contractId }: any = useParams();

  const {
    getDeviceByBussinessConstract,
    getMediaByBussinessConstract,
    getDetailLogBussinessConstract,
  } = presenterBussiness;
  const [
    { execute: getDeviceByBussinessConstractAsync, value: devices },
    { execute: getMediaByBussinessConstractAsync, value: medias },
  ] = useAsync(getDeviceByBussinessConstract, getMediaByBussinessConstract);

  const location = useLocation();
  const history = useHistory();
  const tableLog = useTable();

  const [filter, setFilter] = useState<{
    dateRange: any;
    dateString: any;
    datePicker: any;
    datePickerString: any;
    type: any;
    mediaId: any;
    deviceId: any;
  }>({
    dateRange: null,
    dateString: null,
    datePicker: null,
    datePickerString: null,
    type: null,
    mediaId: null,
    deviceId: null,
  });
  const {
    REPORT,
    DETAIL_REPORT,
    DETAIL_REPORT_BY_PLAY,
    MEDIA_NAME,
    DEVICE_NAME,
    DATE_PLAY,
    TOTAL_REVENUE,
    LIST_MEDIA,
    LIST_DEVICE,
    DATE_TO,
    DATE_FROM,
    PLACEHOLDER_SELECT_DEVICE,
    PLACEHOLDER_SELECT_MEDIA,
  } = useTranslate("revenueByExploitingContractTranslateKey");
  const { GO_BACK, PLACEHOLDER } = useTranslate("common");
  const columns = [
    {
      title: MEDIA_NAME,
      dataIndex: "mediaName",
      key: "mediaName",
    },
    {
      title: DEVICE_NAME,
      dataIndex: "deviceName",
      key: "deviceName",
    },
    {
      title: DATE_PLAY,
      dataIndex: "date",
      key: "date",
      render: (text) => moment(text).format("DD/MM/YYYY"),
    },
    {
      title: `${TOTAL_REVENUE} (VND)`,
      dataIndex: "price",
      key: "price",
      render: (text) => (text === 0 ? text : FormatNumber(text?.toFixed(3))),
    },
  ];
  const breadcrumbs: Breadcrumbs[] = [
    {
      name: REPORT,
      href: "/report-revenue-by-contract",
    },
    {
      name: DETAIL_REPORT,
      href:
        routerRptRevByExploiting.DETAIL_RP_REV_BY_EXPLOITING +
        "/" +
        contractId +
        `?from=${filter.dateRange?.dateFrom?.format(
          formatFromQuery
        )}&to=${filter.dateRange?.dateTo?.format(formatFromQuery)}`,
    },
    {
      name: DETAIL_REPORT_BY_PLAY,
      href: undefined,
    },
  ];

  useEffect(() => {}, []);

  const onChangeSelect = (value, name) => {
    const oldId = {
      mediaId: filter.mediaId,
      deviceId: filter.deviceId,
      [name]: value,
    };
    const dateFromQuery = filter.dateRange?.dateFrom?.format(formatFromQuery);
    const dateToQuery = filter.dateRange?.dateTo?.format(formatFromQuery);
    const queryObj = `m=${oldId.mediaId}&d=${oldId.deviceId}&from=${dateFromQuery}&to=${dateToQuery}`;
    tableLog.fetchData({
      option: {
        ...oldId,
        dateFrom: filter.dateRange?.dateFrom,
        dateTo: filter.dateRange?.dateTo,
        current: 1,
        businessContractId: contractId,
      },
    });
    history.push({
      pathname: location.pathname,
      search: queryObj,
    });
    setFilter((prev) => ({ ...prev, [name]: value }));
  };
  useEffect(() => {
    if (location.search) {
      const from = queryString.parse(location.search).from;
      const to = queryString.parse(location.search).to;
      // const format = type === "1" ? "MMM" : "Q"; // type is number , but get from url is string;

      const dateRange = {
        dateFrom: moment(from, formatFromQuery),
        dateTo: moment(to, formatFromQuery),
      };
      getDeviceByBussinessConstractAsync(null, {
        businessContractId: contractId,
      });
      getMediaByBussinessConstractAsync(null, {
        businessContractId: contractId,
      });
      setFilter((prev) => ({ ...prev, dateRange }));
    }
  }, []);

  useEffect(() => {
    if (location.search) {
      const query = queryString.parse(location.search);

      const from = query.from || undefined;
      const to = query.to || undefined;
      const mediaId = query.m || "";
      const deviceId = query.d || "";
      const dateRange = {
        dateFrom: moment(from, formatFromQuery),
        dateTo: moment(to, formatFromQuery),
      };
      // const format = type === "1" ? "MMM" : "Q" // type is number , but get from url is string
      setFilter((prev) => ({ ...prev, dateRange, mediaId, deviceId }));
    }
  }, []);

  const handleChangeFilter = async (date, dateString, type) => {
    const dateRangeTemp = filter.dateRange;
    dateRangeTemp[type] = date;
    const queryObj = `from=${dateRangeTemp.dateFrom.format(
      formatFromQuery
    )}&to=${dateRangeTemp.dateTo.format(formatFromQuery)}&m=${
      filter.mediaId
    }&d=${filter.deviceId}`;

    history.push({
      pathname: location.pathname,
      search: queryObj,
    });
    tableLog.fetchData &&
      tableLog.fetchData({
        option: {
          mediaId: filter.mediaId,
          deviceId: filter.deviceId,
          dateFrom: dateRangeTemp.dateFrom,
          dateTo: dateRangeTemp.dateTo,
          current: 1,
          businessContractId: contractId,
        },
      });
    let mediaId = filter.mediaId,
      deviceId = filter.deviceId;
    const dataDevice = await getDeviceByBussinessConstractAsync(null, {
      businessContractId: contractId,
      dateFrom: dateRangeTemp?.dateFrom.format("YYYY-MM-DD"),
      dateTo: dateRangeTemp?.dateTo.format("YYYY-MM-DD"),
    });
    const dataMedia = await getMediaByBussinessConstractAsync(null, {
      businessContractId: contractId,
      dateFrom: dateRangeTemp?.dateFrom.format("YYYY-MM-DD"),
      dateTo: dateRangeTemp?.dateTo.format("YYYY-MM-DD"),
    });
    if (dataDevice) {
      const index = dataMedia.data?.findIndex(
        (item) => item.deviceId === filter.deviceId
      );
      if (index == -1) {
        deviceId = "";
      }
    }
    if (dataMedia) {
      const index = dataMedia.data?.findIndex(
        (item) => item.mediaId === filter.mediaId
      );
      if (index == -1) {
        mediaId = "";
      }
    }
    return setFilter((prev) => ({
      ...prev,
      dateRange: dateRangeTemp,
      dateString,
      deviceId,
      mediaId,
    }));
  };

  const disabledDateEnd = (current: Moment) => {
    if (filter.dateRange?.dateFrom) {
      return (
        current && current.isBefore(filter.dateRange?.dateFrom.startOf("day"))
      );
    }
  };
  let firstUpdate = useRef(true);
  useLayoutEffect(() => {
    if (firstUpdate.current) {
      firstUpdate.current = false;
      return;
    }
  }, []);

  return (
    <div>
      <MainTitleComponent
        breadcrumbs={breadcrumbs}
        title={DETAIL_REPORT_BY_PLAY}
      />
      {/* { <FilterByPeriod value={filter.datePicker} onChange={handleChangeFilter} />} */}
      <Row gutter={[15, 15]} justify={"space-between"}>
        <Col span={18}>
          <Row gutter={[15, 15]} align={"middle"}>
            <Col span={3}>{DATE_FROM}:</Col>
            <Col span={6}>
              <DatePicker
                format="DD/MM/YYYY"
                // disabledDate={disabledDateStart}
                placeholder={PLACEHOLDER}
                onChange={(date, dateString) =>
                  handleChangeFilter(date, dateString, "dateFrom")
                }
                value={filter.dateRange?.dateFrom}
              />
            </Col>
            <Col span={3}>{DATE_TO}:</Col>
            <Col span={6}>
              {" "}
              <DatePicker
                disabledDate={disabledDateEnd}
                format="DD/MM/YYYY"
                placeholder={PLACEHOLDER}
                onChange={(date, dateString) =>
                  handleChangeFilter(date, dateString, "dateTo")
                }
                value={filter.dateRange?.dateTo}
              />
            </Col>
          </Row>
        </Col>
      </Row>
      <Row justify="space-between" className="main-form my-3">
        <Col span={6}>
          <label htmlFor="">{LIST_DEVICE} </label>
          <Select
            onChange={(value) => onChangeSelect(value, "deviceId")}
            value={filter?.deviceId}
            className="w-100"
            placeholder={PLACEHOLDER_SELECT_DEVICE}
          >
            {devices?.data?.map((device) => (
              <Select.Option value={device.deviceId}>
                {device.deviceName || device.deviceId}
              </Select.Option>
            ))}
          </Select>
        </Col>
        <Col span={6}>
          <label htmlFor="">{LIST_MEDIA}</label>
          <Select
            onChange={(value) => onChangeSelect(value, "mediaId")}
            value={filter?.mediaId}
            className="w-100"
            placeholder={PLACEHOLDER_SELECT_MEDIA}
          >
            {medias?.data?.map((media) => (
              <Select.Option value={media.mediaId}>
                {media.mediaName || media.mediaId}
              </Select.Option>
            ))}
          </Select>
        </Col>
        <Col span={4}>
          <label htmlFor="" style={{ opacity: 0 }}>
            {" "}
            Danh sách thiết bị{" "}
          </label>
          <Button
            onClick={() => history.push(breadcrumbs[1].href)}
            icon={<i className="fa fa-arrow-left mr-3" />}
            className="normal-button"
          >
            {GO_BACK}
          </Button>
        </Col>
      </Row>
      {filter.dateRange && (
        <TableComponent
          register={tableLog}
          defaultOption={{
            mediaId: filter?.mediaId || "",
            deviceId: filter?.deviceId || "",
            businessContractId: contractId,
            dateFrom: filter.dateRange?.dateFrom,
            dateTo: filter.dateRange?.dateTo,
          }}
          apiServices={getDetailLogBussinessConstract}
          rowKey={"id"}
          className={"main-table"}
          columns={columns}
        />
      )}
    </div>
  );
};

export default ViewDataById;
