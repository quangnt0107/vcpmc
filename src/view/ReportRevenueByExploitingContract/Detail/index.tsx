import React, { useEffect, useState } from 'react';
import { useHistory, useLocation, useParams } from 'react-router';
import { Col, Input, Row, Tabs } from 'antd';
import queryString from 'query-string';

import useTable from '@view/shared/components/TableComponent/hook';
import { useAsync } from '@view/shared/hook/useAsync';
import { useTranslate } from '@view/shared/hook/useTranslate';
import {
  common,
  revenueByExploitingContractTranslateKey,
} from '@view/shared/translateKey';

import presenterReport from '@modules/reportRevenueExploitingContract/presenter';
import MainTitleComponent, {
  Breadcrumbs,
} from '@view/shared/components/MainTitleComponent';
import Filter from './Components/Filter';
import InfoBox from './Components/InfoBox';
import RightMenu from '@view/shared/components/layout/RightMenu';
import TableComponent from '@view/shared/components/TableComponent';
import { getColumns } from './tableConfig';

import { routerRptRevByExploiting } from '@view/routers';

import './styles.scss';
import moment, { Moment } from 'moment';
import useFilterPeriod from '@view/shared/components/FilterByPeriod/hook';
interface Props {}

const formatFromQuery = 'YYYY-MM-DD';
const DetailByContractExploiting = (props: Props) => {
  const {
    getInfoBusinessContract,
    getMediaByBussinessConstract,
    getDeviceByBussinessConstract,
  } = presenterReport;
  const [{ execute: getInfoBusinessContractAsync, value: data }] = useAsync(
    getInfoBusinessContract,
  );
  const { PLACEHOLDER } = useTranslate(common);
  const {
    REPORT,
    DETAIL_REPORT,
    VIEW_DETAIL_PLAY_BY_MEDIA,
    VIEW_DETAIL_PLAY_BY_DEVICE,
    INFO_CONTRACT,
    LIST_DEVICE,
    LIST_MEDIA,
  } = useTranslate("revenueByExploitingContractTranslateKey");

  const history = useHistory();
  const { contractId }: any = useParams();
  const location = useLocation();

  const [key, setKey] = useState('1');
  const [input, setInput] = useState({ song: '', device: '' });
  const [filter, setFilter] = useState<{
    dateRange: {
      dateFrom: Moment;
      dateTo: Moment;
    };
    dateString: any;
    datePicker: any;
    datePickerString: any;
    type: any;
  }>({
    dateRange: {
      dateFrom: moment(),
      dateTo: moment(),
    },
    dateString: null,
    datePicker: null,
    datePickerString: null,
    type: null,
  });
  const [selectedRows, setSelectedRow] = useState<any[]>([]);

  const tableDevice = useTable();
  const tableSong = useTable();
  const filterPeriod = useFilterPeriod();

  const breadcrumbs: Breadcrumbs[] = [
    {
      name: REPORT,
      href: '/report-revenue-by-contract',
    },
    {
      name: DETAIL_REPORT,
      href: undefined,
    },
  ];
  const columns = getColumns(key);

  useEffect(() => {
    const dataFilter = {
      dateForm: '',
      datTo: '',
    };
    getInfoBusinessContractAsync(contractId, dataFilter).then((res) => {});
  }, []);
  useEffect(() => {
    if (location.search) {
      const from = queryString.parse(location.search).from;
      const to = queryString.parse(location.search).to;
      // const format = type === "1" ? "MMM" : "Q"; // type is number , but get from url is string;

      const dateRange = {
        dateFrom: moment(from, formatFromQuery),
        dateTo: moment(to, formatFromQuery),
      };

      setFilter((prev) => ({ ...prev, dateRange }));
    }
  }, [location.search]);

  const handleViewDetailById = () => {
    history.push({
      pathname: `${routerRptRevByExploiting.VIEW_DATA_BY_ID}/${contractId}`,
      search: `m=${selectedRows[0]['mediaId'] || ''}&d=${
        selectedRows[0]['deviceId'] || ''
      }&from=${filter.dateRange?.dateFrom.format(formatFromQuery) || ''}&to=${
        filter.dateRange?.dateTo.format(formatFromQuery) || ''
      }`,
    });
  };
  const rowSelection = {
    selectedRowKeys: [
      ...selectedRows.map((i) => (key == '1' ? i.mediaId : i.deviceId)),
    ],
    onChange: (selectedRowKeys, selectedRows) => {
      setSelectedRow(selectedRows);
    },
  };

  const handleClickOnRow = (record) => {
    const fieldId = key == '1' ? 'mediaId' : 'deviceId';
    const tempSelectedRows = [...selectedRows];
    const index = tempSelectedRows.findIndex(
      (i) => i[fieldId] === record[fieldId],
    );
    if (index == -1) {
      tempSelectedRows.push(record);
    } else {
      tempSelectedRows.splice(index, 1);
    }
    setSelectedRow([...tempSelectedRows]);
  };
  const handleChange = (e, name) => {
    const value = e.target.value;
    setInput((prev) => ({ ...prev, [name]: value }));
  };

  const handleKeyDown = (e) => {
    const keyCode = e.keyCode;
    if (keyCode == 13) {
      if (key == '1') {
        tableSong.fetchData({
          option: {
            search: input.song,
            current: 1,
            businessContractId: contractId,
          },
        });
      } else {
        tableDevice.fetchData({
          option: {
            search: input.device,
            current: 1,
            businessContractId: contractId,
          },
        });
      }
    }
  };
  // const handleChangeFilter = async (
  //   dateRange,
  //   dateString,
  //   datePicker,
  //   datePickerString,
  //   type
  // ) => {
  //   if (key == "1") {
  //     tableSong.fetchData &&
  //       tableSong.fetchData({
  //         option: {
  //           search: input.song,
  //           current: 1,
  //           dateFrom: dateRange?.dateFrom?.format("YYYY-MM-DD"),
  //           dateTo: dateRange?.dateTo?.format("YYYY-MM-DD"),
  //           businessContractId: contractId,
  //         },
  //       });
  //   } else {
  //     tableDevice.fetchData &&
  //       tableDevice.fetchData({
  //         option: {
  //           search: input.device,
  //           current: 1,
  //           dateFrom: dateRange?.dateFrom?.format("YYYY-MM-DD"),
  //           dateTo: dateRange?.dateTo?.format("YYYY-MM-DD"),
  //           businessContractId: contractId,
  //         },
  //       });
  //   }
  //   history.push({
  //     search: `date=${datePickerString}&type=${type}`,
  //   });
  //   return setFilter({
  //     dateRange,
  //     dateString,
  //     datePicker,
  //     datePickerString,
  //     type,
  //   });
  // };
  const handelChangeFilter = (rangeDate, rangeDateString) => {
    const TempRangeDate = filter.dateRange;
    if (key == '1') {
      tableSong.fetchData &&
        tableSong.fetchData({
          option: {
            search: input.song,
            current: 1,
            dateFrom: rangeDate[0].format(formatFromQuery),
            dateTo: rangeDate[1].format(formatFromQuery),
            businessContractId: contractId,
          },
        });
    } else {
      tableDevice.fetchData &&
        tableDevice.fetchData({
          option: {
            search: input.device,
            current: 1,
            dateFrom: rangeDate[0].format(formatFromQuery),
            dateTo: rangeDate[1].format(formatFromQuery),
            businessContractId: contractId,
          },
        });
    }
    history.push({
      search: `from=${rangeDate[0].format(
        formatFromQuery,
      )}&to=${rangeDate[1].format(formatFromQuery)}`,
    });
    TempRangeDate.dateFrom = rangeDate[0];
    TempRangeDate.dateTo = rangeDate[1];

    return setFilter((prev) => ({ ...prev, dateRange: TempRangeDate }));
  };
  const arrayAction = [
    {
      icon: 'fas fa-filter',
      name: `${
        key == '1' ? VIEW_DETAIL_PLAY_BY_MEDIA : VIEW_DETAIL_PLAY_BY_DEVICE
      }`,
      handleAction: handleViewDetailById,
      disable: selectedRows.length != 1,
    },
  ];
  return (
    <div className="detail-revenue-exploiting-constract">
      {selectedRows.length > 0 && <RightMenu arrayAction={arrayAction} />}
      <MainTitleComponent
        breadcrumbs={breadcrumbs}
        title={`${DETAIL_REPORT} - ${
          data?.businessContract?.businessContractCode || null
        }`}
      />
      <Row gutter={[15, 15]}>
        <Col span={18} offset={6}>
          <Filter
            filterPeriod={filterPeriod}
            contractId={contractId}
            onChange={handelChangeFilter}
            date={filter?.dateRange}
          />
        </Col>
        <Col span={6}>
          <InfoBox data={data?.businessContract} title={INFO_CONTRACT} />
        </Col>
        <Col span={18}>
          <Tabs
            size={'large'}
            onChange={(activeKey) => {
              setSelectedRow([]);
              return setKey(activeKey);
            }}
            destroyInactiveTabPane
            defaultValue={key}
            className={'tab-custom tab-custom-50'}
          >
            <Tabs.TabPane tab={LIST_MEDIA} key={1}>
              <Row align={'middle'} justify={'end'}>
                <Col span={6}>
                  <Input.Search
                    className="ant-form-search my-3"
                    onChange={(e) => handleChange(e, 'song')}
                    placeholder={PLACEHOLDER}
                    onKeyDown={handleKeyDown}
                  />
                </Col>
              </Row>
              {filter?.dateRange && (
                <TableComponent
                  register={tableSong}
                  apiServices={getMediaByBussinessConstract}
                  defaultOption={{
                    businessContractId: contractId,
                    dateFrom: filter.dateRange?.dateFrom?.format('YYYY-MM-DD'),
                    dateTo: filter.dateRange?.dateTo?.format('YYYY-MM-DD'),
                  }}
                  onRow={(record, rowIndex) => ({
                    onClick: () => {
                      handleClickOnRow(record);
                    },
                  })}
                  rowSelection={rowSelection}
                  rowKey={'mediaId'}
                  className={'main-table'}
                  columns={columns}
                />
              )}
            </Tabs.TabPane>
            <Tabs.TabPane tab={LIST_DEVICE} key={2}>
              <Row align={'middle'} justify={'end'}>
                <Col span={6}>
                  <Input.Search
                    className="ant-form-search my-3"
                    onChange={(e) => handleChange(e, 'device')}
                    placeholder={PLACEHOLDER}
                    onKeyDown={handleKeyDown}
                  />
                </Col>
              </Row>
              {filter?.dateRange && (
                <TableComponent
                  register={tableDevice}
                  apiServices={getDeviceByBussinessConstract}
                  defaultOption={{
                    businessContractId: contractId,
                    dateFrom: filter?.dateRange?.dateFrom?.format('YYYY-MM-DD'),
                    dateTo: filter?.dateRange?.dateTo?.format('YYYY-MM-DD'),
                  }}
                  onRow={(record, rowIndex) => ({
                    onClick: () => {
                      handleClickOnRow(record);
                    },
                  })}
                  rowSelection={rowSelection}
                  rowKey={'deviceId'}
                  className={'main-table'}
                  columns={columns}
                />
              )}
            </Tabs.TabPane>
          </Tabs>
        </Col>
      </Row>
    </div>
  );
};

export default DetailByContractExploiting;
