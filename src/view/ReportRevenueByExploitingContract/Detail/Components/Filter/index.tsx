import TitleComponent from '@view/shared/components/MainTitleComponent/TitleComponent';
import { Row, Col, DatePicker, Button } from 'antd';
import moment, { Moment } from 'moment';
import React, {
  useEffect,
  useLayoutEffect,
  useMemo,
  useRef,
  useState,
} from 'react';
import { useHistory, useLocation } from 'react-router';
import FilterByPeriod from '@view/shared/components/FilterByPeriod';
import queryString from 'query-string';
import { routerRptRevByExploiting } from '@view/routers';
import useFilterPeriod from '@view/shared/components/FilterByPeriod/hook';
import { useTranslate } from '@view/shared/hook/useTranslate';
import {
  common,
  revenueByExploitingContractTranslateKey,
} from '@view/shared/translateKey';

interface Props {
  // onChange: (dateRange, dateString, datePicker, datePickerString, type) => void;
  onChange: (rangeDate, rangeDateString) => void;
  contractId: string;
  date?: {
    dateFrom: Moment;
    dateTo: Moment;
  };
  filterPeriod: any;
}

const Filter = (props: Props) => {
  const history = useHistory();

  const { date, filterPeriod } = props;
  const { PLACEHOLDER } = useTranslate("common");
  const { DATE_TO, DATE_FROM, REVENUE_CONTROL } = useTranslate(
    "revenueByExploitingContractTranslateKey",
  );
  const [rangeDate, setRangeDate] = useState({
    dateFrom: moment(),
    dateTo: moment(),
  });

  const location = useLocation();
  const handleClickForControl = () => {
    history.replace({
      pathname: `${routerRptRevByExploiting.VIEW_DATA_BY_ID}/${props.contractId}`,
      search: `${location.search}`,
      state: {
        from: queryString.parse(location.search).from,
        to: queryString.parse(location.search).to,
        m: '',
        d: '',
      },
    });
  };
  const firstUpdate = useRef(true);

  useEffect(() => {
    if (date) {
      setRangeDate(date);
    }
  }, [date]);
  // useMemo(() => {
  //     if (!firstUpdate.current) {
  //         props.onChange && props.onChange([rangeDate.dateFrom, rangeDate.dateTo], [rangeDate.dateFrom.format("DD/MM/YYYY"), rangeDate.dateTo.format("DD/MM/YYYY")])
  //     }
  // }, [rangeDate.dateFrom, rangeDate.dateTo])
  // const handleChangeFilter = ({ dateRange, dateString, datePicker, datePickerString, type }) => {

  //     props.onChange && props.onChange(dateRange, dateString, datePicker, datePickerString, type)
  // }

  const disabledDateEnd = (current: Moment) => {
    if (rangeDate.dateFrom) {
      return current && current.isBefore(rangeDate.dateFrom.startOf('day'));
    }
  };
  const disabledDateStart = (current) => {
    return current && current < moment(rangeDate.dateFrom).endOf('day');
  };
  const handleChangeRange = (date: Moment, dateString, type) => {
    const dateRangeTemp = rangeDate;
    dateRangeTemp[type] = date;

    props.onChange &&
      props.onChange(
        [dateRangeTemp.dateFrom, dateRangeTemp.dateTo],
        [
          dateRangeTemp.dateFrom.format('DD/MM/YYYY'),
          dateRangeTemp.dateTo.format('DD/MM/YYYY'),
        ],
      );
    if (type == 'dateFrom') {
      if (date.isAfter(dateRangeTemp.dateTo)) {
        return setRangeDate((prev) => ({
          ...prev,
          [type]: date,
          dateTo: date,
        }));
      }
    }
    return setRangeDate((prev) => ({ ...prev, [type]: date }));
  };

  return (
    <Col span={24}>
      <Row gutter={[15, 15]} justify={'space-between'}>
        <Col span={18}>
          <Row gutter={[15, 15]} align={'middle'}>
            <Col span={3}>{DATE_FROM}:</Col>
            <Col span={6}>
              <DatePicker
                format="DD/MM/YYYY"
                // disabledDate={disabledDateStart}
                placeholder={PLACEHOLDER}
                onChange={(date, dateString) =>
                  handleChangeRange(date, dateString, 'dateFrom')
                }
                value={rangeDate.dateFrom}
              />
            </Col>
            <Col span={3}>{DATE_TO}:</Col>
            <Col span={6}>
              {' '}
              <DatePicker
                disabledDate={disabledDateEnd}
                format="DD/MM/YYYY"
                placeholder={PLACEHOLDER}
                onChange={(date, dateString) =>
                  handleChangeRange(date, dateString, 'dateTo')
                }
                value={rangeDate.dateTo}
              />
            </Col>
          </Row>
        </Col>
        {/* <DatePicker.RangePicker value={date} onChange={handleChangeRange} /> */}
        {/* <Col span={12}> <FilterByPeriod registerRef={filterPeriod} value={date} onChange={handleChangeFilter} /></Col> */}
        <Col>
          {' '}
          <Button onClick={handleClickForControl} className="normal-button">
            {' '}
            {REVENUE_CONTROL}{' '}
          </Button>
        </Col>
      </Row>
    </Col>
  );
};

export default Filter;
