import newHTTPRepository, { HTTPRepository } from "@modules/core/repository/http";
import CONFIG from "@config/index";
import BusinessContractEntity from "@modules/businessContract/entity";
import moment from "moment";

export const getInfoBusinessContract = async (businessContractId, filter: { dateFrom: string, dateTo: string }) => {
    const response = await newHTTPRepository.execute({
        path: `/api/Reports/reportBusinessContract/${businessContractId}`,
        method: "get",
        payload: filter,
        showSuccess: false
    });
    return new BusinessContractEntity(response?.businessContract)
};
export const getMediaByBussinessConstract = async (pagination, option) => {
    const { businessContractId } = option
    const filter = {
        dateFrom: option.dateFrom,
        dateTo: option.dateTo
    }
    const response = await newHTTPRepository.execute({
        path: `/api/Reports/reportBusinessContract/${businessContractId}/mediaOnDevice`,
        method: "get",
        params: { ...pagination, ...filter },
        showSuccess: false
    });
    return {
        data: response.pagedData,
        info: {
            ...response.pageInfo,
            total: response.pageInfo.totalCount,
            current: response.pageInfo.currentPage,
        }
    }
    // return response.data
}
export const getDeviceByBussinessConstract = async (pagination, option) => {
    const { businessContractId } = option;
    const filter = {
        dateFrom: option.dateFrom,
        dateTo: option.dateTo
    }
    const response = await newHTTPRepository.execute({
        path: `/api/Reports/reportBusinessContract/${businessContractId}/deviceOnMedia`,
        method: "get",
        params: { ...pagination, ...filter },
        showSuccess: false
    });
    return {
        data: response.pagedData,
        info: {
            ...response.pageInfo,
            total: response.pageInfo.totalPages,
            current: response.pageInfo.currentPage,
        }
    }
    // return response.data
}
export const getDetailLogBussinessConstract = async (pagination, option) => {
    const { businessContractId, mediaId, deviceId, orderByQuery, searchContent } = option;
    const { pageSize, current } = pagination;
    let dateFrom = null, dateTo = null
    if (moment.isMoment(option.dateFrom)) {
        dateFrom = option.dateFrom.format("YYYY-MM-DD")
    }
    if (moment.isMoment(option.dateTo)) {
        dateTo = option.dateTo.format("YYYY-MM-DD")
    }
    const params = {
        pageSize,
        pageNumber: current,
        deviceId: deviceId,
        mediaId: mediaId === null ?"":mediaId,
        orderByQuery,
        searchContent,
        dateFrom,
        dateTo
    }
    const response = await newHTTPRepository.execute({
        path: `/api/Reports/reportBusinessContract/${businessContractId}/detailLog`,
        method: "get",
        params: params,
        showSuccess: false
    });
    return {
        data: response.pagedData,
        info: {
            ...response.pageInfo,
            total: response.pageInfo.totalCount,
            current: pagination.current,
            pageSize
        }
    }
    // return response.data
}

export default {
    getInfoBusinessContract,
    getMediaByBussinessConstract,
    getDeviceByBussinessConstract,
    getDetailLogBussinessConstract
};